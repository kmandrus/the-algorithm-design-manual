Traveling Salesman Problem

Implement the two TSP heuristics of Section 1.1 (page 5). Which of them gives better 
solutions in practice? Can you devise a heuristic that works better than both of them?

Input: A set S of n points in a plane.
Output: What is the shortest cycle tour that visits each point in the set S?

Heuristic 1: Nearest Neighbor 
Starting from some point, p0, we walk first to its nearest neighbor p1. From 
p1, we walk to its nearest unvisited neighbor, thus excluding p0 as a candidate. 
We now repeat this until we run out of unvisited points, after which we return 
to p0 to close off the tour.

Heuristic 2: Closest Pair
Repeatedly connect the closest pair of endpoints whose connection will not create a 
problem, such as the premature termination of the cycle. Each vertex begins as its own 
single vertex chain. After merging everything together, we will end up with a single chain
containing all the points in it. Connecting the final two endpoints gives us a cycle.

Test Cases: randomly generated collections of points in a plane

Output: Ordered of the visited points, the length of the tour, and runtime.


What do we need?
    A plane that represents a collection of points.
    Points (A tuple will likely suffice)
    The algorithms
    Tests that can be run on each algorithm
        Maybe just pass in the name of the function we wish to test as a parameter? 
    A generator for planes containing a random set of points.

The implementation of the closest pair is mired in complications. I think this could
be improved by picking a data structure that more closely mirrors the "chain" of verticies. 
Currently, I'm using a doubly linked list, and it's possible that's still the best option. I 
may only need to add a few more helper methods. However, let's go back to brainstorming to 
consider a few more options:
    Doubly Linked List
    Ordered array of edges
    Dictionary of points and their successors
    List of points

Doubly Linked List
    add magic methods for iteration, membership, length, and converstion to list
    link_to_head, link_to_tail methods

Perhaps my real problem is how I store the chains. The heruristic wants to continue 
iterating until all the chains have merged into one. How can I represent this?
    Adding and removing chains from the set of chains
    Checking until the length of a single chain has reached the target

How do I keep track of the candidate chains? It would be nice if when I merged two 
chains, they were automatically merged within their container. That might mean the 
container is a list of all verticies that dynamically computes which chains are present
based upon the connections.

Another idea is to move to a more functional model. When we connect verticies with an
edge, we actually create a new chain. Determining membership in the set of chains becomes
an issue again though. The easiest way is to, again, have the container of chains hold
the logic for linking and unlinking the verticies. When chains are modified, an entirely
new version of the container is returned each time. What would we name this container?
Is is simply a graph? Like, a graph as in a collection of verticies and edges?

Using a "graph" object to manage the verticies and edges is the most promising idea 
among the bunch. What's the interface to this graph?
    get_verticies - a list of all verticies in the graph
    is_connected - determines if two points are connected anywhere by an edge
    is_adjacent - determines if two verticies are immediately connected by an edge
    get_connected_verticies - given a vertex, return all verticies connected by an edge
    get_adjacent_verticies - given a vertex, return its neighbors connected by an edge
    connect - connects two verticies with an edge
    get_chains - all distinct chains in the graph
    length - compute the length between two verticies

Interface for a "chain," or a collection of verticies connected by a single edge.
    head
    tail
    verticies - list of verticies ordered from head to tail
    is_member(vertex)

Interface for an "edge" - may be unneeded!
    start
    end
    length
